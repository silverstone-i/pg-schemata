{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pg-schemata","text":"<p>A lightweight ORM built on pg-promise with schema-first table definitions.</p>"},{"location":"docs-setup/","title":"\ud83d\udee0 Documentation Site Setup","text":"<p>This guide outlines how to generate, sanitize, build, and publish the documentation site for <code>pg-schemata</code>.</p>"},{"location":"docs-setup/#jsdoc-annotations","title":"\ud83d\udcc4 JSDoc Annotations","text":"<p>Documentation is generated from JSDoc comments in the codebase using <code>documentation.js</code>.</p>"},{"location":"docs-setup/#folder-structure","title":"\ud83d\udcc1 Folder Structure","text":"<pre><code>pg-schemata/\n\u251c\u2500\u2500 src/                         # Source code with JSDoc comments\n\u251c\u2500\u2500 pg-schemata-docs/\n\u2502   \u2514\u2500\u2500 documentation/          # Generated .md files\n\u251c\u2500\u2500 docs-site/\n\u2502   \u251c\u2500\u2500 docs/                   # Sanitized Markdown files for MkDocs\n\u2502   \u251c\u2500\u2500 mkdocs.yml              # MkDocs site configuration\n\u2502   \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"docs-setup/#install-js-dependencies","title":"\ud83d\udce6 Install JS Dependencies","text":"<p>Run the following to install <code>documentation.js</code> and related tooling:</p> <pre><code>npm install\n</code></pre>"},{"location":"docs-setup/#build-documentation-files","title":"\ud83d\udcdc Build Documentation Files","text":"<p>Use the following script from <code>package.json</code> to generate both documentation files and sanitize the output:</p> <pre><code>\"scripts\": {\n    \"docs\": \"documentation build src/index.js -f md -o pg-schemata-docs/documentation/pg-schemata.md &amp;&amp; documentation build src/schemaTypes.d.ts -f md -o pg-schemata-docs/documentation/schemaTypes.md &amp;&amp; node ./pg-schemata-docs/sanitizeToc.js\",\n}\n</code></pre> <p>Run with:</p> <pre><code>npm run docs\n</code></pre> <p>This generates both documentation files and sanitizes the output using the <code>sanitizeToc.js</code> script.</p>"},{"location":"docs-setup/#python-mkdocs-setup","title":"\ud83d\udc0d Python &amp; MkDocs Setup","text":"<ol> <li>Install Python (via Homebrew)</li> </ol> <pre><code>brew install python\n</code></pre> <ol> <li>Create Virtual Environment</li> </ol> <pre><code>python3 -m venv venv\n</code></pre> <ol> <li>Activate Environment</li> </ol> <pre><code>source venv/bin/activate\n</code></pre> <ol> <li>Install MkDocs and Plugins <pre><code>pip install mkdocs mkdocs-material mkdocs-material-extensions==1.3.1\n</code></pre></li> </ol>"},{"location":"docs-setup/#build-preview-mkdocs-site","title":"\ud83d\udee0 Build &amp; Preview MkDocs Site","text":"<p>From inside the <code>pg-schemata-docs/</code> folder (run source venv/bin/activate first if python is already setup):</p> <pre><code>mkdocs serve\n</code></pre> <p>To build static site output:</p> <pre><code>mkdocs build\n</code></pre>"},{"location":"docs-setup/#publish-to-github-pages","title":"\ud83d\ude80 Publish to GitHub Pages","text":"<p>To publish built site:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>This pushes the site to the <code>gh-pages</code> branch of your repository and makes it live.</p>"},{"location":"docs-setup/#requirements-summary","title":"\u2705 Requirements Summary","text":"<ul> <li>Node.js v18+</li> <li>Python 3.10+</li> <li>documentation.js</li> <li>MkDocs Material theme v9.6.14+</li> <li>mkdocs-material-extensions v1.3.1+</li> </ul>"},{"location":"pg-schemata/","title":"Library Overview","text":""},{"location":"pg-schemata/#db","title":"DB","text":"<p>DB is a singleton utility class that initializes and provides access to a configured pg-promise database instance. It also auto-attaches custom repositories to the DB object on first initialization.</p> <p>Use <code>DB.init(connection, repositories)</code> once at startup to initialize the DB. Then access <code>DB.db</code> and <code>DB.pgp</code> as needed throughout your application.</p>"},{"location":"pg-schemata/#init","title":"init","text":"<p>Initializes the DB singleton if it hasn't been initialized yet.</p>"},{"location":"pg-schemata/#parameters","title":"Parameters","text":"<ul> <li><code>connection</code> (object | string) A pg-promise-compatible connection object or string.</li> <li><code>repositories</code> Object&lt;string, Function&gt; A map of repository names to their constructors.</li> <li><code>logger</code> object Optional logger passed to each repository. (optional, default <code>null</code>)</li> </ul> <ul> <li>Throws Error If connection or repositories are invalid.</li> </ul>"},{"location":"pg-schemata/#pgp","title":"pgp","text":"<p>The initialized pg-promise instance.</p>"},{"location":"pg-schemata/#tablemodel","title":"TableModel","text":"<p>Extends QueryModel</p> <p>TableModel extends QueryModel to provide full read/write support for a PostgreSQL table.</p> <p>Adds create, update, and delete capabilities on top of the read-only features in QueryModel, along with support for spreadsheet import/export, validation, and conditional mutations.</p> <p>\u2705 Features:</p> <ul> <li>Full CRUD: <code>insert</code>, <code>update</code>, <code>delete</code>, <code>deleteWhere</code>, <code>updateWhere</code></li> <li>Cursor-based and paginated queries via <code>findAfterCursor</code></li> <li>Bulk operations: <code>bulkInsert</code>, <code>bulkUpdate</code></li> <li>Data import/export: <code>importFromSpreadsheet</code>, <code>exportToSpreadsheet</code></li> <li>Auto Zod schema validation and field sanitization</li> </ul> <p>This class is the standard entry point for interacting with a single table in pg-schemata.</p>"},{"location":"pg-schemata/#parameters_1","title":"Parameters","text":"<ul> <li><code>db</code> </li> <li><code>pgp</code> </li> <li><code>schema</code> </li> <li><code>logger</code> </li> </ul>"},{"location":"pg-schemata/#insert","title":"insert","text":"<p>Inserts a single row into the table after validation and sanitization.</p>"},{"location":"pg-schemata/#parameters_2","title":"Parameters","text":"<ul> <li><code>dto</code> Object Data to insert.</li> </ul> <ul> <li>Throws SchemaDefinitionError If validation fails or DTO is invalid.</li> </ul> <p>Returns Promise&lt;Object&gt; The inserted row.</p>"},{"location":"pg-schemata/#delete","title":"delete","text":"<p>Deletes a record by its ID.</p>"},{"location":"pg-schemata/#parameters_3","title":"Parameters","text":"<ul> <li><code>id</code> (string | number) Primary key of the row to delete.</li> </ul> <ul> <li>Throws Error If the ID is invalid or deletion fails.</li> </ul> <p>Returns Promise&lt;number&gt; Number of rows deleted.</p>"},{"location":"pg-schemata/#update","title":"update","text":"<p>Updates a record by ID with new data.</p>"},{"location":"pg-schemata/#parameters_4","title":"Parameters","text":"<ul> <li><code>id</code> (string | number) Primary key value.</li> <li><code>dto</code> Object Updated values.</li> </ul> <ul> <li>Throws SchemaDefinitionError If ID or DTO is invalid.</li> </ul> <p>Returns Promise&lt;(Object | null)&gt; Updated record or null if not found.</p>"},{"location":"pg-schemata/#upsert","title":"upsert","text":"<p>Inserts a record or updates it if it conflicts with specified columns.</p>"},{"location":"pg-schemata/#parameters_5","title":"Parameters","text":"<ul> <li><code>dto</code> Object Data to insert or update.</li> <li><code>conflictColumns</code> Array&lt;string&gt; Columns that define the conflict constraint.</li> <li><code>updateColumns</code> Array&lt;string&gt;? Columns to update on conflict. Defaults to all non-conflict columns. (optional, default <code>null</code>)</li> </ul> <p>Returns Promise&lt;Object&gt; The inserted or updated row.</p>"},{"location":"pg-schemata/#bulkupsert","title":"bulkUpsert","text":"<p>Bulk upsert multiple records in a single transaction.</p>"},{"location":"pg-schemata/#parameters_6","title":"Parameters","text":"<ul> <li><code>records</code> Array&lt;Object&gt; Array of records to upsert.</li> <li><code>conflictColumns</code> Array&lt;string&gt; Columns that define the conflict constraint.</li> <li><code>updateColumns</code> Array&lt;string&gt;? Columns to update on conflict. Defaults to all non-conflict columns. (optional, default <code>null</code>)</li> <li><code>returning</code> (Array&lt;string&gt; | null) Optional array of columns to return. (optional, default <code>null</code>)</li> </ul> <p>Returns Promise&lt;(number | Array)&gt; Number of rows affected or array of rows if returning specified.</p>"},{"location":"pg-schemata/#deletewhere","title":"deleteWhere","text":"<p>Deletes rows matching a WHERE clause.</p>"},{"location":"pg-schemata/#parameters_7","title":"Parameters","text":"<ul> <li><code>where</code> (Object | Array) Filter criteria.</li> </ul> <p>Returns Promise&lt;number&gt; Number of rows deleted.</p>"},{"location":"pg-schemata/#touch","title":"touch","text":"<p>Updates only the updated_by timestamp for a given row.</p>"},{"location":"pg-schemata/#parameters_8","title":"Parameters","text":"<ul> <li><code>id</code> (string | number) Primary key.</li> <li><code>updatedBy</code> string User performing the update. (optional, default <code>'system'</code>)</li> </ul> <p>Returns Promise&lt;(Object | null)&gt; Updated row.</p>"},{"location":"pg-schemata/#updatewhere","title":"updateWhere","text":"<p>Updates rows matching a WHERE clause.</p>"},{"location":"pg-schemata/#parameters_9","title":"Parameters","text":"<ul> <li><code>where</code> (Object | Array) Conditions.</li> <li><code>updates</code> Object Fields to update.</li> <li><code>options</code> Object Additional options (e.g., includeDeactivated). (optional, default <code>{}</code>)</li> </ul> <ul> <li>Throws SchemaDefinitionError If input is invalid.</li> </ul> <p>Returns Promise&lt;number&gt; Number of rows updated.</p>"},{"location":"pg-schemata/#bulkinsert","title":"bulkInsert","text":"<p>Inserts many rows in a single batch operation, with optional RETURNING support.</p>"},{"location":"pg-schemata/#parameters_10","title":"Parameters","text":"<ul> <li><code>records</code> Array&lt;Object&gt; Rows to insert.</li> <li><code>returning</code> (Array&lt;string&gt; | null) Optional array of columns to return. (optional, default <code>null</code>)</li> </ul> <ul> <li>Throws SchemaDefinitionError If records or returning are invalid.</li> </ul> <p>Returns Promise&lt;(number | Array&lt;Object&gt;)&gt; Number of rows inserted, or array of rows if returning specified.</p>"},{"location":"pg-schemata/#bulkupdate","title":"bulkUpdate","text":"<p>Updates multiple rows using their primary keys.</p>"},{"location":"pg-schemata/#parameters_11","title":"Parameters","text":"<ul> <li><code>records</code> Array&lt;Object&gt; Each must include an ID field.</li> <li><code>returning</code> (Array&lt;string&gt; | null) Optional array of columns to return. (optional, default <code>null</code>)</li> </ul> <ul> <li>Throws SchemaDefinitionError If input or IDs are invalid.</li> </ul> <p>Returns Promise&lt;Array&gt; Array of row counts or updated rows per query.</p>"},{"location":"pg-schemata/#importfromspreadsheet","title":"importFromSpreadsheet","text":"<p>Loads data from an Excel file and inserts it into the table. Each row can be transformed using an optional callback before insertion.</p>"},{"location":"pg-schemata/#parameters_12","title":"Parameters","text":"<ul> <li><code>filePath</code> string Source .xlsx file path.</li> <li><code>sheetIndex</code> number Sheet index to load. (optional, default <code>0</code>)</li> <li><code>callbackFn</code>   (optional, default <code>null</code>)</li> <li><code>returning</code>   (optional, default <code>null</code>)</li> </ul> <ul> <li>Throws SchemaDefinitionError If file format is invalid or spreadsheet is empty.</li> </ul> <p>Returns Promise&lt;{inserted: number}&gt; Number of rows inserted.</p>"},{"location":"pg-schemata/#removewhere","title":"removeWhere","text":"<p>Soft deletes records matching a WHERE clause by setting deactivated_at = NOW().</p>"},{"location":"pg-schemata/#parameters_13","title":"Parameters","text":"<ul> <li><code>where</code> (Object | Array) Filter criteria.</li> </ul> <p>Returns Promise&lt;number&gt; Number of rows updated.</p>"},{"location":"pg-schemata/#restorewhere","title":"restoreWhere","text":"<p>Restores previously soft-deleted records by setting deactivated_at = NULL.</p>"},{"location":"pg-schemata/#parameters_14","title":"Parameters","text":"<ul> <li><code>where</code> (Object | Array) Filter criteria.</li> </ul> <p>Returns Promise&lt;number&gt; Number of rows updated.</p>"},{"location":"pg-schemata/#purgesoftdeletewhere","title":"purgeSoftDeleteWhere","text":"<p>Permanently deletes soft-deleted records that match a given condition. Useful for scheduled cleanup of records older than a threshold.</p>"},{"location":"pg-schemata/#parameters_15","title":"Parameters","text":"<ul> <li><code>where</code> (Object | Array&lt;Object&gt;) Filter conditions. (optional, default <code>[]</code>)</li> </ul> <p>Returns Promise&lt;Object&gt; pg-promise result.</p>"},{"location":"pg-schemata/#purgesoftdeletebyid","title":"purgeSoftDeleteById","text":"<p>Permanently deletes a soft-deleted row by ID.</p>"},{"location":"pg-schemata/#parameters_16","title":"Parameters","text":"<ul> <li><code>id</code> (string | number) Primary key value.</li> </ul> <p>Returns Promise&lt;Object&gt; pg-promise result.</p>"},{"location":"pg-schemata/#truncate","title":"truncate","text":"<p>Truncates the table and resets its identity sequence.</p> <p>Returns Promise\\"},{"location":"pg-schemata/#createtable","title":"createTable","text":"<p>Creates the table using the current schema definition.</p> <p>Returns Promise\\"},{"location":"pg-schemata/#schemadefinitionerror","title":"SchemaDefinitionError","text":"<p>Extends Error</p> <p>Custom error used to indicate problems with table schema definitions or data validation within pg-schemata. This is typically thrown during insert/update validation or schema parsing.</p>"},{"location":"pg-schemata/#parameters_17","title":"Parameters","text":"<ul> <li><code>message</code> string Error message describing the schema issue.</li> <li><code>originalError</code> (Error | null) Optional original error cause for tracing. (optional, default <code>null</code>)</li> </ul>"},{"location":"pg-schemata/#createhash","title":"createHash","text":"<p>Creates a short MD5-based hash of the input string.</p>"},{"location":"pg-schemata/#parameters_18","title":"Parameters","text":"<ul> <li><code>input</code> string Value to hash.</li> </ul> <p>Returns string A 6-character hex hash.</p>"},{"location":"pg-schemata/#querymodel","title":"QueryModel","text":"<p>QueryModel provides reusable read-only query logic for PostgreSQL tables.</p> <p>Designed for models that require flexible query-building capabilities, either as a standalone read-only interface or to be extended for full CRUD functionality.</p> <p>It may be instantiated directly when only read-access is required.</p> <p>\u2705 Features:</p> <ul> <li>Dynamic WHERE clause generation via <code>buildWhereClause</code> and <code>buildCondition</code></li> <li>Query helpers: <code>findWhere</code>, <code>findAll</code>, <code>findOneBy</code></li> <li>Aggregations and checks: <code>count</code>, <code>countAll</code>, <code>exists</code></li> <li>Rich condition syntax with <code>$like</code>, <code>$from</code>, <code>$eq</code>, <code>$in</code>, <code>$and</code>, <code>$or</code>, etc.</li> </ul> <p>\ud83d\udccc See where-modifiers.md for full reference.</p>"},{"location":"pg-schemata/#parameters_19","title":"Parameters","text":"<ul> <li><code>db</code> </li> <li><code>pgp</code> </li> <li><code>schema</code> </li> <li><code>logger</code>   (optional, default <code>null</code>)</li> </ul>"},{"location":"pg-schemata/#findsoftdeleted","title":"findSoftDeleted","text":"<p>Finds only soft-deleted records.</p>"},{"location":"pg-schemata/#parameters_20","title":"Parameters","text":"<ul> <li><code>conditions</code> Array&lt;Object&gt; Optional extra conditions. (optional, default <code>[]</code>)</li> <li><code>joinType</code> string Logical joiner ('AND' or 'OR'). (optional, default <code>'AND'</code>)</li> <li><code>options</code> Object Query options. (optional, default <code>{}</code>)</li> </ul> <p>Returns Promise&lt;Array&lt;Object&gt;&gt; Soft-deleted rows.</p>"},{"location":"pg-schemata/#issoftdeleted","title":"isSoftDeleted","text":"<p>Checks if a specific record is soft-deleted.</p>"},{"location":"pg-schemata/#parameters_21","title":"Parameters","text":"<ul> <li><code>id</code> (number | string) The primary key value.</li> </ul> <p>Returns Promise&lt;boolean&gt; True if the record is soft-deleted, false otherwise.</p>"},{"location":"pg-schemata/#findall","title":"findAll","text":"<p>Fetches all rows from the table with optional pagination.</p>"},{"location":"pg-schemata/#parameters_22","title":"Parameters","text":"<ul> <li> <p><code>options</code> Object Query options. (optional, default <code>{}</code>)</p> <ul> <li><code>options.limit</code> number Maximum number of records to return. (optional, default <code>50</code>)</li> <li><code>options.offset</code> number Number of records to skip. (optional, default <code>0</code>)</li> </ul> </li> </ul> <p>Returns Promise&lt;Array&lt;Object&gt;&gt; List of rows.</p>"},{"location":"pg-schemata/#findbyid","title":"findById","text":"<p>Finds a single row by its ID.</p>"},{"location":"pg-schemata/#parameters_23","title":"Parameters","text":"<ul> <li><code>id</code> (number | string) The primary key value.</li> </ul> <ul> <li>Throws Error If ID is invalid.</li> </ul> <p>Returns Promise&lt;(Object | null)&gt; Matching row or null if not found.</p>"},{"location":"pg-schemata/#findbyidincludingdeactivated","title":"findByIdIncludingDeactivated","text":"<p>Finds a single row by its ID, including soft-deleted records.</p>"},{"location":"pg-schemata/#parameters_24","title":"Parameters","text":"<ul> <li><code>id</code> (number | string) The primary key value.</li> </ul> <ul> <li>Throws Error If ID is invalid.</li> </ul> <p>Returns Promise&lt;(Object | null)&gt; Matching row or null if not found.</p>"},{"location":"pg-schemata/#findwhere","title":"findWhere","text":"<p>Finds rows matching conditions and optional filters.</p>"},{"location":"pg-schemata/#parameters_25","title":"Parameters","text":"<ul> <li><code>conditions</code> Array&lt;Object&gt; Array of condition objects. (optional, default <code>[]</code>)</li> <li><code>joinType</code> string Logical operator ('AND' or 'OR'). (optional, default <code>'AND'</code>)</li> <li> <p><code>options</code> Object Query options. (optional, default <code>{}</code>)</p> <ul> <li><code>options.columnWhitelist</code> Array&lt;string&gt;? Columns to return. (optional, default <code>null</code>)</li> <li><code>options.filters</code> Object? Additional filter object. (optional, default <code>{}</code>)</li> <li><code>options.orderBy</code> (string | Array&lt;string&gt;)? Sort columns. (optional, default <code>null</code>)</li> <li><code>options.limit</code> number? Limit results. (optional, default <code>null</code>)</li> <li><code>options.offset</code> number? Offset results. (optional, default <code>null</code>)</li> <li><code>options.includeDeactivated</code> boolean Include soft-deleted records when true. (optional, default <code>false</code>)</li> </ul> </li> </ul> <p>Returns Promise&lt;Array&lt;Object&gt;&gt; Matching rows.</p>"},{"location":"pg-schemata/#findoneby","title":"findOneBy","text":"<p>Finds the first row matching the given conditions.</p>"},{"location":"pg-schemata/#parameters_26","title":"Parameters","text":"<ul> <li><code>conditions</code> Array&lt;Object&gt; Condition list.</li> <li><code>options</code> Object? Query options (same as findWhere). (optional, default <code>{}</code>)</li> </ul> <p>Returns Promise&lt;(Object | null)&gt; First matching row or null.</p>"},{"location":"pg-schemata/#findaftercursor","title":"findAfterCursor","text":"<p>Retrieves a paginated set of rows after a cursor position.</p>"},{"location":"pg-schemata/#parameters_27","title":"Parameters","text":"<ul> <li><code>cursor</code> Object Cursor values keyed by orderBy columns. (optional, default <code>{}</code>)</li> <li><code>limit</code> number Max number of rows to return. (optional, default <code>50</code>)</li> <li><code>orderBy</code> Array&lt;string&gt; Columns used for pagination ordering. (optional, default <code>['id']</code>)</li> <li> <p><code>options</code> Object Query options. (optional, default <code>{}</code>)</p> <ul> <li><code>options.columnWhitelist</code> Array&lt;string&gt;? Columns to return.</li> <li><code>options.filters</code> Object? Additional filter object.</li> <li><code>options.includeDeactivated</code> boolean Include soft-deleted records when true. (optional, default <code>false</code>)</li> </ul> </li> </ul>"},{"location":"pg-schemata/#reload","title":"reload","text":"<p>Reloads a single record by ID using findById.</p>"},{"location":"pg-schemata/#parameters_28","title":"Parameters","text":"<ul> <li><code>id</code> (string | number) Primary key value.</li> <li> <p><code>options</code> Object? Optional flags. (optional, default <code>{}</code>)</p> <ul> <li><code>options.includeDeactivated</code> boolean Whether to include soft-deleted records. (optional, default <code>false</code>)</li> </ul> </li> </ul> <p>Returns Promise&lt;(Object | null)&gt; The found record or null.</p>"},{"location":"pg-schemata/#exporttospreadsheet","title":"exportToSpreadsheet","text":"<p>Exports table data to an Excel file based on filter criteria.</p>"},{"location":"pg-schemata/#parameters_29","title":"Parameters","text":"<ul> <li><code>filePath</code> string Destination .xlsx path.</li> <li><code>where</code> Array Optional conditions. (optional, default <code>[]</code>)</li> <li><code>joinType</code> string Join type between conditions. (optional, default <code>'AND'</code>)</li> <li><code>options</code> Object Additional query options. (optional, default <code>{}</code>)</li> </ul> <p>Returns Promise&lt;{exported: number, filePath: string}&gt; </p>"},{"location":"pg-schemata/#exists","title":"exists","text":"<p>Checks if any row exists matching the given conditions.</p>"},{"location":"pg-schemata/#parameters_30","title":"Parameters","text":"<ul> <li><code>conditions</code> Object Condition object.</li> <li><code>options</code> Object? Query options. (optional, default <code>{}</code>)</li> </ul> <ul> <li>Throws Error If conditions are invalid.</li> </ul> <p>Returns Promise&lt;boolean&gt; True if a match is found.</p>"},{"location":"pg-schemata/#countwhere","title":"countWhere","text":"<p>Counts the number of rows matching a WHERE clause.</p>"},{"location":"pg-schemata/#parameters_31","title":"Parameters","text":"<ul> <li><code>conditions</code> Array&lt;Object&gt; Array of condition objects. (optional, default <code>[]</code>)</li> <li><code>joinType</code> string Logical joiner ('AND' or 'OR'). (optional, default <code>'AND'</code>)</li> <li> <p><code>options</code> Object Query options. (optional, default <code>{}</code>)</p> <ul> <li><code>options.filters</code> Object? Additional filter object. (optional, default <code>{}</code>)</li> <li><code>options.includeDeactivated</code> boolean Include soft-deleted records when true. (optional, default <code>false</code>)</li> </ul> </li> </ul> <p>Returns Promise&lt;number&gt; Number of matching rows.</p>"},{"location":"pg-schemata/#countall","title":"countAll","text":"<p>Counts all rows in the table.</p>"},{"location":"pg-schemata/#parameters_32","title":"Parameters","text":"<ul> <li> <p><code>options</code> Object? Query options. (optional, default <code>{}</code>)</p> <ul> <li><code>options.includeDeactivated</code> boolean Include soft-deleted records when true. (optional, default <code>false</code>)</li> </ul> </li> </ul> <p>Returns Promise&lt;number&gt; Total row count.</p>"},{"location":"pg-schemata/#buildvaluesclause","title":"buildValuesClause","text":"<p>Generates a SQL-safe VALUES clause using this model's ColumnSet.</p>"},{"location":"pg-schemata/#parameters_33","title":"Parameters","text":"<ul> <li><code>data</code> Array&lt;(Object | Array)&gt; Array of rows (object or array form)</li> </ul> <p>Returns string VALUES clause for direct embedding in SQL</p>"},{"location":"pg-schemata/#validatedto","title":"validateDto","text":"<p>Validates a single DTO or an array of DTOs using a Zod validator.</p>"},{"location":"pg-schemata/#parameters_34","title":"Parameters","text":"<ul> <li><code>data</code> (Object | Array&lt;Object&gt;) The DTO or array of DTOs to validate.</li> <li><code>validator</code> </li> <li><code>type</code> string Optional label used in error messages. (optional, default <code>'DTO'</code>)</li> </ul> <ul> <li>Throws SchemaDefinitionError If validation fails. The <code>.cause</code> property contains Zod error details.</li> </ul>"},{"location":"pg-schemata/#sanitizedto","title":"sanitizeDto","text":"<p>Returns a sanitized copy of the input, filtering out invalid or immutable columns.</p>"},{"location":"pg-schemata/#parameters_35","title":"Parameters","text":"<ul> <li><code>dto</code> Object Input object.</li> <li> <p><code>options</code> Object?  (optional, default <code>{}</code>)</p> <ul> <li><code>options.includeImmutable</code> boolean  (optional, default <code>true</code>)</li> </ul> </li> </ul> <p>Returns Object Sanitized DTO.</p>"},{"location":"pg-schemata/#escapename","title":"escapeName","text":"<p>Escapes a column or table name using pg-promise syntax.</p>"},{"location":"pg-schemata/#parameters_36","title":"Parameters","text":"<ul> <li><code>name</code> string Unescaped identifier.</li> </ul> <p>Returns string Escaped name.</p>"},{"location":"pg-schemata/#setschemaname","title":"setSchemaName","text":"<p>Sets a new schema name and regenerates the column set.</p>"},{"location":"pg-schemata/#parameters_37","title":"Parameters","text":"<ul> <li><code>name</code> string The new schema name.</li> </ul> <ul> <li>Throws Error If name is invalid.</li> </ul> <p>Returns QueryModel The updated model instance.</p>"},{"location":"pg-schemata/#buildwhereclause","title":"buildWhereClause","text":"<p>Builds a SQL WHERE clause from conditions.</p>"},{"location":"pg-schemata/#parameters_38","title":"Parameters","text":"<ul> <li><code>where</code> (Object | Array&lt;Object&gt;) Conditions object or array. (optional, default <code>{}</code>)</li> <li><code>requireNonEmpty</code> boolean Enforce non-empty input. (optional, default <code>true</code>)</li> <li><code>values</code> Array Array to accumulate parameter values. (optional, default <code>[]</code>)</li> <li><code>joinType</code> string Logical operator for combining. (optional, default <code>'AND'</code>)</li> <li><code>includeDeactivated</code> boolean Include soft-deleted records if true. (optional, default <code>false</code>)</li> </ul> <ul> <li>Throws Error If input is invalid or empty when required.</li> </ul> <p>Returns {clause: string, values: Array} Clause and parameter list.</p>"},{"location":"pg-schemata/#buildcondition","title":"buildCondition","text":"<p>Builds a SQL fragment from a group of conditions, supporting nested logic and advanced operators.</p> <p>\ud83d\udd0d Supports field-level modifiers like <code>$like</code>, <code>$from</code>, <code>$in</code>, etc. \ud83d\udd01 Also supports nested boolean logic via <code>$and</code>, <code>$or</code>, <code>and</code>, <code>or</code>.</p> <p>\ud83d\udcd8 See full documentation: WHERE Clause Modifiers Reference</p>"},{"location":"pg-schemata/#parameters_39","title":"Parameters","text":"<ul> <li><code>group</code> Array&lt;Object&gt; Array of condition objects.</li> <li><code>joiner</code> string Logical joiner ('AND' or 'OR') between conditions. (optional, default <code>'AND'</code>)</li> <li><code>values</code> Array Parameter values to be populated. (optional, default <code>[]</code>)</li> </ul> <p>Returns string A SQL-safe WHERE fragment.</p>"},{"location":"pg-schemata/#handledberror","title":"handleDbError","text":"<p>Handles known pg errors and logs them.</p>"},{"location":"pg-schemata/#parameters_40","title":"Parameters","text":"<ul> <li><code>err</code> Error The error thrown by pg-promise.</li> </ul> <ul> <li>Throws DatabaseError Translated database error.</li> </ul>"},{"location":"pg-schemata/#calldb","title":"callDb","text":"<p>Returns a schema-aware version of a registered model or repository.</p>"},{"location":"pg-schemata/#parameters_41","title":"Parameters","text":"<ul> <li><code>modelOrName</code> (string | object) The model instance or its name.</li> <li><code>schemaName</code> string The database schema to bind.</li> </ul> <p>Returns object The model bound to the given schema.</p>"},{"location":"pg-schemata/#databaseerror","title":"DatabaseError","text":"<p>Extends Error</p> <p>Custom error class for representing PostgreSQL-related database errors. Wraps the original error thrown by pg-promise or pg, and extracts useful metadata such as the constraint name, table, and SQLSTATE error code.</p>"},{"location":"pg-schemata/#parameters_42","title":"Parameters","text":"<ul> <li><code>message</code> string A human-readable description of the error.</li> <li><code>originalError</code> Error The original error object from PostgreSQL.</li> </ul>"},{"location":"schemaTypes/","title":"Schema Types","text":""},{"location":"schemaTypes/#columndefinition","title":"ColumnDefinition","text":"<p>Type: Object</p>"},{"location":"schemaTypes/#properties","title":"Properties","text":"<ul> <li><code>name</code> string The name of the column.</li> <li><code>type</code> string PostgreSQL data type (e.g., 'text', 'uuid', 'integer', 'varchar', 'jsonb').</li> <li><code>generated</code> (<code>\"always\"</code> | <code>\"by default\"</code>)? Marks the column as a generated column.</li> <li><code>expression</code> string? SQL expression used for the generated column.</li> <li><code>stored</code> boolean? Whether the generated column should be stored.</li> <li><code>notNull</code> boolean? Whether the column accepts null values. Defaults to false.</li> <li><code>default</code> any? Default value for the column. Can be a literal or SQL expression.</li> <li><code>immutable</code> boolean? If true, the column cannot be updated after creation. Defaults to false.</li> <li> <p><code>colProps</code> Object? Extended column behavior modifiers.</p> <ul> <li><code>colProps.mod</code> string? pg-promise format modifier.</li> <li><code>colProps.cnd</code> boolean? Use in conditional update clause.</li> <li><code>colProps.def</code> string? Override default value.</li> <li><code>colProps.validator</code> any? Custom Zod validator for this column.</li> </ul> </li> </ul>"},{"location":"schemaTypes/#constraintdefinition","title":"ConstraintDefinition","text":"<p>Type: Object</p>"},{"location":"schemaTypes/#properties_1","title":"Properties","text":"<ul> <li><code>type</code> (<code>\"PrimaryKey\"</code> | <code>\"ForeignKey\"</code> | <code>\"Unique\"</code> | <code>\"Check\"</code> | <code>\"Index\"</code>) Type of constraint.</li> <li><code>columns</code> Array&lt;string&gt; List of column names the constraint applies to.</li> <li><code>references</code> {table: string, columns: Array&lt;string&gt;}? For foreign keys.</li> <li><code>onDelete</code> string? Optional ON DELETE behavior (e.g., 'CASCADE').</li> <li><code>expression</code> string? SQL expression for check constraints.</li> </ul>"},{"location":"schemaTypes/#constraints","title":"Constraints","text":"<p>Type: Object</p>"},{"location":"schemaTypes/#properties_2","title":"Properties","text":"<ul> <li><code>primaryKey</code> Array&lt;string&gt;? Column names used as the primary key.</li> <li><code>unique</code> Array&lt;Array&lt;string&gt;&gt;? List of unique constraints (single or composite).</li> <li><code>foreignKeys</code> Array&lt;ConstraintDefinition&gt;? Array of foreign key definitions.</li> <li><code>checks</code> Array&lt;ConstraintDefinition&gt;? Array of SQL check expressions.</li> <li><code>indexes</code> Array&lt;ConstraintDefinition&gt;? Index definitions for query optimization.</li> </ul>"},{"location":"schemaTypes/#tableschema","title":"TableSchema","text":"<p>Type: Object</p>"},{"location":"schemaTypes/#properties_3","title":"Properties","text":"<ul> <li><code>dbSchema</code> string PostgreSQL schema name (e.g., 'public').</li> <li><code>table</code> string Table name.</li> <li><code>hasAuditFields</code> boolean? Whether to include created_at/updated_at/by fields.</li> <li><code>softDelete</code> boolean? Whether to use a soft delete strategy.</li> <li><code>version</code> string? Optional schema version string.</li> <li><code>columns</code> Array&lt;ColumnDefinition&gt; List of column definitions.</li> <li><code>constraints</code> Constraints? Table-level constraints.</li> </ul>"},{"location":"where-modifiers/","title":"WHERE Clause Modifiers Reference","text":"<p>This guide describes the supported modifiers that can be used in <code>findWhere</code>, <code>updateWhere</code>, <code>buildCondition</code>, and similar methods in pg-schemata's query model.</p>"},{"location":"where-modifiers/#modifier-reference-table","title":"\ud83d\udccc Modifier Reference Table","text":"Modifier Type Description Example <code>$eq</code> any Equal to <code>{ status: { $eq: 'A' } }</code> <code>$ne</code> any Not equal to <code>{ status: { $ne: 'X' } }</code> <code>$like</code> string SQL <code>LIKE</code> pattern <code>{ name: { $like: 'John%' } }</code> <code>$ilike</code> string Case-insensitive <code>ILIKE</code> pattern <code>{ name: { $ilike: '%doe' } }</code> <code>$from</code> comparable Greater than or equal <code>{ date: { $from: '2024-01-01' } }</code> <code>$to</code> comparable Less than or equal <code>{ date: { $to: '2024-12-31' } }</code> <code>$in</code> array Matches any value in the list <code>{ status: { $in: ['A', 'B'] } }</code> <code>$max</code> boolean/true Equals maximum value in the table <code>{ score: { $max: true } }</code> <code>$min</code> boolean/true Equals minimum value in the table <code>{ value: { $min: true } }</code> <code>$sum</code> boolean/true Equals total sum of values in the table <code>{ amount: { $sum: true } }</code>"},{"location":"where-modifiers/#usage-example","title":"\ud83e\udde0 Usage Example","text":"<pre><code>[\n  { status: { $eq: 'active' } },\n  { $or: [\n      { created_at: { $from: '2024-01-01' } },\n      { created_by: { $like: 'admin%' } }\n    ]\n  }\n]\n</code></pre>"},{"location":"where-modifiers/#see-also","title":"\ud83d\udd17 See Also","text":"<ul> <li>QueryModel.buildCondition</li> <li>QueryModel.findWhere</li> <li>TableModel.updateWhere</li> <li>pg-schemata.md</li> </ul>"}]}